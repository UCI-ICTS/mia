AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a medium EC2 instance with a Flask app, Nginx, Gunicorn, and a small PostgreSQL RDS database.

Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: MyVPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  # Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Public Subnet Route Table Association
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # IAM Role for EC2 Instance to access Secrets Manager
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: MiaSecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - secretsmanager:GetSecretValue
                Resource: arn:aws:secretsmanager:us-east-1:342166997321:secret:/mia/ssh/key-68NEtu

                  
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # Security Group for EC2 Instance
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and web access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
            
  # EC2 Instance        
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: RDSInstance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-04a81a99f5ec58529 # Canonical, Ubuntu 24.04 LTS 
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e

          # Update and install required packages
          apt-get update -y
          apt-get install -y git python3-pip postgresql-client-common postgresql-client nginx python3.12-venv unzip

          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/home/ubuntu/awscliv2.zip"
          unzip /home/ubuntu/awscliv2.zip -d /home/ubuntu
          /home/ubuntu/aws/install

          # Retrieve the private key from Secrets Manager
          mkdir -p /home/ubuntu/.ssh
          aws secretsmanager get-secret-value --region us-east-1 --secret-id /mia/ssh/key --query 'SecretString' --output text > /home/ubuntu/.ssh/id_rsa
          chmod 600 /home/ubuntu/.ssh/id_rsa
          chown -R ubuntu:ubuntu /home/ubuntu/.ssh

          # Add GitHub's SSH key to known hosts
          ssh-keyscan github.com >> /home/ubuntu/.ssh/known_hosts
          chown ubuntu:ubuntu /home/ubuntu/.ssh/known_hosts

          # Clone the repository
          sudo -u ubuntu git clone ${GitRepoUrl} /home/ubuntu/mia
          chmod 755 /home/ubuntu/mia
          chown -R ubuntu:ubuntu /home/ubuntu/mia

          # Install Python dependencies
          sudo -u ubuntu python3 -m venv /home/ubuntu/mia/venv
          sudo -u ubuntu /home/ubuntu/mia/venv/bin/pip install -r /home/ubuntu/mia/requirements.txt

          # Create start script to import environment variables and run Gunicorn
          cat <<EOF > /home/ubuntu/mia/start.sh
          #!/bin/bash
          source /home/ubuntu/mia/.miaenv
          source /home/ubuntu/mia/venv/bin/activate
          exec gunicorn --workers 3 --bind unix:/home/ubuntu/mia/mia.sock mia:app
          EOF

          # Make the start script executable
          chmod +x /home/ubuntu/mia/start.sh
          chown ubuntu:ubuntu /home/ubuntu/mia/start.sh

          # Create a Gunicorn systemd service file
          cat <<EOF > /etc/systemd/system/mia.service
          [Unit]
          Description=gunicorn daemon for mia application
          After=network.target

          [Service]
          User=ubuntu
          Group=www-data
          WorkingDirectory=/home/ubuntu/mia
          ExecStart=/home/ubuntu/mia/start.sh
          Restart=always

          [Install]
          WantedBy=multi-user.target
          EOF

          # Start and enable Gunicorn (aka mia) service
          systemctl daemon-reload
          systemctl restart mia
          systemctl enable mia

          # Modify Nginx configuration. Need to set the user and group
          sed -i '1s/^user .*;/user ubuntu www-data;/' /etc/nginx/nginx.conf

          # Configure Nginx
          cat <<EOF > /etc/nginx/sites-available/mia
          server {
            listen 80;
            server_name _;

            location / {
              proxy_pass http://unix:/home/ubuntu/mia/mia.sock;
              proxy_set_header Host \$host;
              proxy_set_header X-Real-IP \$remote_addr;
              proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto \$scheme;
            }
          }
          EOF

          # Enable the Nginx configuration and restart Nginx. Remove default because it can cause interference
          rm /etc/nginx/sites-enabled/default
          ln -s /etc/nginx/sites-available/mia /etc/nginx/sites-enabled/
          systemctl restart nginx
          systemctl enable nginx

  # Security Group for RDS Instance
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to RDS from EC2
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # RDS PostgreSQL Database
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: MiaPrdPostgresDb
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBName: mia_app
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: Mia-RDS-Instance

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB subnet group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  DBUsername:
    Description: The database admin account username
    Type: String
    Default: pgadmin
        
  DBPassword:
    Description: The database admin account password
    Type: String
    NoEcho: true  
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
        
  GitRepoUrl:
    Description: URL of the Git repository containing your Flask app
    Type: String  
    Default: git@github.com:UCI-GREGoR/mia.git
        
Outputs:
  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance

  EC2PublicDNS:
    Description: EC2 Instance Public DNS 
    Value: !GetAtt EC2Instance.PublicDnsName
        
  RDSInstanceEndpoint:
    Description: The RDS instance endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
    
  RDSInstancePort:  
    Description: The RDS instance port
    Value: !GetAtt RDSInstance.Endpoint.Port